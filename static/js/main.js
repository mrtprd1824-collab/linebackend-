// =======================================================
// START: Sound Notification Setup
// =======================================================
// 1. ‡∏™‡∏£‡πâ‡∏≤‡∏á Audio object ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡πÑ‡∏ß‡πâ‡πÅ‡∏Ñ‡πà‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÄ‡∏î‡∏µ‡∏¢‡∏ß
const notificationSound = new Audio('/static/sounds/newchats.mp3');
let canPlaySound = false; // ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÇ‡∏î‡∏¢‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï‡πÉ‡∏´‡πâ‡πÄ‡∏•‡πà‡∏ô‡πÄ‡∏™‡∏µ‡∏¢‡∏á

// 2. ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏õ‡∏•‡∏î‡∏•‡πá‡∏≠‡∏Å‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏Ñ‡∏•‡∏¥‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÅ‡∏£‡∏Å
function enableSound() {
    if (canPlaySound) return; // ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÅ‡∏Ñ‡πà‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÄ‡∏î‡∏µ‡∏¢‡∏ß

    // ‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡πà‡∏ô‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÅ‡∏£‡∏Å "‡πÄ‡∏á‡∏µ‡∏¢‡∏ö" ‡πÇ‡∏î‡∏¢‡∏Å‡∏≤‡∏£ Mute ‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß
    notificationSound.muted = true;
    const promise = notificationSound.play();

    if (promise !== undefined) {
        promise.then(_ => {
            // ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏•‡πà‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ‡πÉ‡∏´‡πâ‡∏´‡∏¢‡∏∏‡∏î‡πÅ‡∏•‡∏∞‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£ Mute ‡∏ó‡∏±‡∏ô‡∏ó‡∏µ
            notificationSound.pause();
            notificationSound.currentTime = 0;
            notificationSound.muted = false;
            canPlaySound = true;
            console.log('üîä Sound system activated silently by user interaction.');
            document.body.removeEventListener('click', enableSound, true);
        }).catch(error => {
            // ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏õ‡∏±‡∏ç‡∏´‡∏≤ ‡πÉ‡∏´‡πâ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£ Mute ‡πÅ‡∏•‡πâ‡∏ß‡∏õ‡∏•‡πà‡∏≠‡∏¢‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ñ‡∏±‡∏î‡πÑ‡∏õ‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà
            notificationSound.muted = false;
            console.error("Silent sound activation failed:", error);
        });
    }
}

// 3. ‡∏£‡∏≠‡πÉ‡∏´‡πâ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏Ñ‡∏•‡∏¥‡∏Å‡∏ó‡∏µ‡πà‡πÑ‡∏´‡∏ô‡∏Å‡πá‡πÑ‡∏î‡πâ‡πÉ‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏ß‡πá‡∏ö‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÄ‡∏™‡∏µ‡∏¢‡∏á
document.body.addEventListener('click', enableSound, true);
// =======================================================
// END: Sound Notification Setup
// =======================================================

/**
 * ‚òÖ‚òÖ‚òÖ [‡∏¢‡πâ‡∏≤‡∏¢‡∏°‡∏≤‡πÑ‡∏ß‡πâ‡∏ï‡∏£‡∏á‡∏ô‡∏µ‡πâ] ‚òÖ‚òÖ‚òÖ
 * ‡πÅ‡∏õ‡∏•‡∏á ISO timestamp string ‡πÉ‡∏´‡πâ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö "HH:mm" ‡∏´‡∏£‡∏∑‡∏≠ "DD Mon"
 * @param {string} isoString - ‡πÄ‡∏ß‡∏•‡∏≤‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö ISO 8601 (‡πÄ‡∏ä‡πà‡∏ô "2025-10-15T12:30:00Z")
 * @returns {string} - ‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏à‡∏±‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡πÅ‡∏•‡πâ‡∏ß
 */
function formatSidebarTimestamp(isoString) {
    if (!isoString) return '';

    const messageDate = new Date(isoString);
    const now = new Date();

    const isToday = messageDate.getDate() === now.getDate() &&
        messageDate.getMonth() === now.getMonth() &&
        messageDate.getFullYear() === now.getFullYear();

    if (isToday) {
        // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ: ‡πÅ‡∏™‡∏î‡∏á‡πÅ‡∏Ñ‡πà HH:mm
        return messageDate.toLocaleTimeString('th-TH', { hour: '2-digit', minute: '2-digit' });
    } else {
        // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏ß‡∏±‡∏ô‡∏≠‡∏∑‡πà‡∏ô: ‡πÅ‡∏™‡∏î‡∏á‡πÅ‡∏Ñ‡πà "15 Oct"
        return messageDate.toLocaleDateString('en-GB', { day: 'numeric', month: 'short' });
    }
}

function truncateDisplayName(name, maxLength = 20) {
    if (!name) return '';
    const normalized = String(name);
    if (normalized.length <= maxLength) {
        return normalized;
    }
    const sliceLength = Math.max(maxLength - 3, 0);
    return sliceLength > 0 ? normalized.slice(0, sliceLength) + '...' : normalized.slice(0, maxLength);
}

document.addEventListener('DOMContentLoaded', function () {
    // 1. STATE & VARIABLES
    window.failedMessageQueue = {};
    let currentUserId = null;
    let currentOaId = null;
    let currentUserDbId = null;
    let selectedImageFile = null;
    let availableQuickReplies = [];
    let currentOffset = 0;
    let totalMessages = 0;
    let isLoadingMore = false;
    let currentRoom = null;
    let isSearching = false;
    let currentFullNote = '';
    let currentUserTags = [];
    window.currentUserPictureUrl = null;



    const serverDataEl = document.getElementById('server-data');
    const SERVER_DATA = JSON.parse(serverDataEl.textContent);
    const currentUserEmail = SERVER_DATA.current_user_email;
    const socket = io();

    // 2. ELEMENT SELECTORS
    const userList = document.getElementById('user-list');
    const chatArea = document.getElementById('chat-area');
    const chatPlaceholder = document.querySelector('.chat-placeholder');
    const messagesContainer = document.getElementById('chat-messages');
    const replyForm = document.getElementById('reply-form');
    const replyMessageInput = document.getElementById('reply-message');
    const attachImageBtn = document.getElementById('attach-image-btn');
    const imageInput = document.getElementById('image-input');
    const imagePreviewModal = new bootstrap.Modal(document.getElementById('imagePreviewModal'));
    const previewImage = document.getElementById('preview-image');
    const confirmSendImageBtn = document.getElementById('confirm-send-image-btn');
    const imageViewModal = new bootstrap.Modal(document.getElementById('imageViewModal'));
    const fullImageView = document.getElementById('full-image-view');
    const stickerPickerModalEl = document.getElementById('stickerPickerModal');
    const stickerPickerModal = new bootstrap.Modal(stickerPickerModalEl);
    const quickReplyBtn = document.getElementById('quick-reply-btn');
    const quickReplyModal = new bootstrap.Modal(document.getElementById('quickReplyModal'));
    const quickReplyList = document.getElementById('quick-reply-list');
    const quickReplySearch = document.getElementById('quick-reply-search');
    const inlineQrResults = document.getElementById('inline-qr-results');
    const noteEditorModal = new bootstrap.Modal(document.getElementById('noteEditorModal'));
    const fullNoteTextarea = document.getElementById('full-note-textarea');
    const newMessageAlert = document.getElementById('new-message-alert');
    const tagsModal = new bootstrap.Modal(document.getElementById('tagsModal'));
    const saveTagsBtn = document.getElementById('save-tags-btn');
    const tagsChecklistContainer = document.getElementById('tags-checklist-container');
    const customerInfoPanel = document.getElementById('customer-info-panel');
    const infoPlaceholder = customerInfoPanel.querySelector('.info-placeholder');
    const infoArea = document.getElementById('info-area');

    // =======================================================
    // START: REAL-TIME UNREAD TIMER LOGIC
    // =======================================================

    /**
     * ‡πÅ‡∏õ‡∏•‡∏á‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö MM:SS
     * @param {number} totalSeconds - ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
     * @returns {string} - ‡∏™‡∏ï‡∏£‡∏¥‡∏á‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö MM:SS
     */
    function formatTime(totalSeconds) {
        if (totalSeconds < 0) totalSeconds = 0;

        // 1. ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á, ‡∏ô‡∏≤‡∏ó‡∏µ, ‡πÅ‡∏•‡∏∞‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ ‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏•‡∏Ç‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏ï‡πá‡∏°
        const hours = Math.floor(totalSeconds / 3600);
        const minutes = Math.floor((totalSeconds % 3600) / 60);
        const seconds = Math.floor(totalSeconds % 60);

        // 2. ‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏•‡∏Ç 2 ‡∏´‡∏•‡∏±‡∏Å‡πÄ‡∏™‡∏°‡∏≠ (‡πÄ‡∏ä‡πà‡∏ô 01, 02)
        const paddedMinutes = String(minutes).padStart(2, '0');
        const paddedSeconds = String(seconds).padStart(2, '0');

        // 3. ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ß‡πà‡∏≤‡∏à‡∏∞‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡πÅ‡∏ö‡∏ö‡πÑ‡∏´‡∏ô
        if (hours > 0) {
            // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏Å‡∏¥‡∏ô 1 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á ‡πÉ‡∏´‡πâ‡πÅ‡∏™‡∏î‡∏á ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á:‡∏ô‡∏≤‡∏ó‡∏µ:‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
            const paddedHours = String(hours).padStart(2, '0');
            return `${paddedHours}:${paddedMinutes}:${paddedSeconds}`;
        } else {
            // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏ñ‡∏∂‡∏á‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á ‡πÉ‡∏´‡πâ‡πÅ‡∏™‡∏î‡∏á‡πÅ‡∏Ñ‡πà ‡∏ô‡∏≤‡∏ó‡∏µ:‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
            return `${paddedMinutes}:${paddedSeconds}`;
        }
    }


    /**
     * ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ï‡∏±‡∏ß‡∏ô‡∏±‡∏ö‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏≠‡πà‡∏≤‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÉ‡∏ô sidebar
     */
    function updateUnreadTimers() {
        // ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ó‡∏∏‡∏Å‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÅ‡∏ä‡∏ó‡∏ó‡∏µ‡πà‡∏°‡∏µ data-unread-timestamp
        const conversationsWithUnread = document.querySelectorAll('[data-unread-timestamp]');

        conversationsWithUnread.forEach(convElement => {
            const timestamp = parseFloat(convElement.dataset.unreadTimestamp);
            const userId = convElement.dataset.userid;
            const oaId = convElement.dataset.oaid;
            const timerElement = document.getElementById(`timer-${userId}-${oaId}`);

            if (timerElement && timestamp) {
                const nowInSeconds = Math.floor(Date.now() / 1000);
                const secondsDiff = nowInSeconds - timestamp;
                timerElement.textContent = formatTime(secondsDiff);
            }
        });
    }

    // --- ‚òÖ‚òÖ‚òÖ ‡πÉ‡∏ä‡πâ Listener ‡∏ä‡∏∏‡∏î‡πÉ‡∏´‡∏°‡πà‡∏ô‡∏µ‡πâ‡πÅ‡∏ó‡∏ô‡∏Ç‡∏≠‡∏á‡πÄ‡∏Å‡πà‡∏≤ ‚òÖ‚òÖ‚òÖ ---
    infoArea.addEventListener('click', function (event) {
        // ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ 3 ‡∏õ‡∏∏‡πà‡∏°‡πÉ‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏î‡∏µ‡∏¢‡∏ß: Status, Manage Tags, Edit Note
        handleStatusButtonClick(event);
        if (event.target.closest('#manage-tags-btn')) {
            openTagsModal();
        }
        if (event.target.closest('#edit-note-btn')) {
            fullNoteTextarea.value = currentFullNote;
            noteEditorModal.show();
        }
    });

    infoArea.addEventListener('submit', function (event) {
        // ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏ü‡∏≠‡∏£‡πå‡∏° Save Info
        if (event.target.id === 'user-info-form') {
            handleSaveUserInfo(event);
        }
    });

    // Event ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏° Save Note ‡πÉ‡∏ô Modal
    document.getElementById('save-note-btn').addEventListener('click', async function () {
        const newNoteText = fullNoteTextarea.value;
        if (!currentUserDbId) return;

        try {
            const response = await fetch(`/chats/api/user_info/${currentUserDbId}`, {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                // ‡πÄ‡∏£‡∏≤‡πÉ‡∏ä‡πâ Endpoint ‡πÄ‡∏î‡∏¥‡∏° ‡πÅ‡∏ï‡πà‡∏™‡πà‡∏á‡πÅ‡∏Ñ‡πà note ‡πÑ‡∏õ
                body: JSON.stringify({
                    note: newNoteText,
                    // ‡∏™‡πà‡∏á‡∏Ñ‡πà‡∏≤‡πÄ‡∏î‡∏¥‡∏°‡πÑ‡∏õ‡∏î‡πâ‡∏ß‡∏¢‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ‡∏°‡∏±‡∏ô‡∏Å‡∏•‡∏≤‡∏¢‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡πà‡∏≤‡∏ß‡πà‡∏≤‡∏á
                    nickname: document.getElementById('user-nickname').value,
                    phone: document.getElementById('user-phone').value,
                })
            });

            if (!response.ok) throw new Error('Failed to save note');

            // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï UI
            currentFullNote = newNoteText;
            const notePreview = document.getElementById('note-preview');
            notePreview.textContent = newNoteText ? newNoteText.replace(/\n/g, ' ') : 'Add a note...';

            noteEditorModal.hide();
            // ‡πÇ‡∏´‡∏•‡∏î‡πÅ‡∏ä‡∏ó‡πÉ‡∏´‡∏°‡πà‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡πÄ‡∏´‡πá‡∏ô Log ‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç
            loadChatForUser(currentUserId, currentOaId);

        } catch (error) {
            console.error("Save note error:", error);
            alert("Failed to save note.");
        }
    });

    async function loadChatForUser(userId, oaId) {
        console.log(`--- Starting loadChatForUser for ${userId} ---`);
        let frozenTime = null;
        const userLink = document.querySelector(`.list-group-item-action[data-userid="${userId}"][data-oaid="${oaId}"]`);

        if (userLink) {
            // --- [‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç] ‡∏¢‡πâ‡∏≤‡∏¢ Logic ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏°‡∏≤‡πÑ‡∏ß‡πâ‡∏ï‡∏£‡∏á‡∏ô‡∏µ‡πâ ---
            // 1. ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÄ‡∏ß‡∏•‡∏≤‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î ‡∏ì ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ‡∏ó‡∏µ‡πà‡∏Å‡∏î
            if (userLink.dataset.unreadTimestamp) {
                const timestamp = parseFloat(userLink.dataset.unreadTimestamp);
                const nowInSeconds = Math.floor(Date.now() / 1000);
                const secondsDiff = nowInSeconds - timestamp;
                frozenTime = formatTime(secondsDiff);
                console.log(`Timer calculated and frozen at: ${frozenTime}`);
            }

            // 2. ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï UI ‡∏ó‡∏±‡∏ô‡∏ó‡∏µ
            userLink.classList.remove('status-unread');
            userLink.removeAttribute('data-unread-timestamp');
            const timerElement = userLink.querySelector('.unread-timer');
            if (timerElement) {
                if (frozenTime !== null) {
                    timerElement.textContent = frozenTime;
                }
                timerElement.classList.add('text-muted', 'timer-frozen');
                timerElement.classList.remove('text-danger');
            }

            // 3. ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ Active Class
            document.querySelectorAll('#user-list .list-group-item-action').forEach(link => link.classList.remove('active'));
            userLink.classList.add('active');
            // --- [‡∏à‡∏ö‡∏™‡πà‡∏ß‡∏ô‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç] ---
        }

        chatPlaceholder.classList.add('d-none');
        chatArea.classList.remove('d-none');
        messagesContainer.innerHTML = '<p class="text-center text-muted">Loading messages...</p>';

        try {
            const data = await fetchChatData(userId, oaId, frozenTime);
            console.log("Data received from server for this user:", data.user);
            console.log("Tags for this user:", data.user.tags);

            currentUserId = userId;
            currentOaId = oaId;
            currentUserDbId = data.user.db_id;
            window.currentUserPictureUrl = data.user.picture_url;
            currentOffset = data.messages.length;
            totalMessages = data.total_messages;
            isLoadingMore = false;
            currentFullNote = data.user.note || '';


            // (‡πÇ‡∏Ñ‡πâ‡∏î‡∏™‡πà‡∏ß‡∏ô Render ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏¢‡∏≤‡∏ß‡πÜ ‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏î‡∏¥‡∏°)
            // 1. ‡πÅ‡∏™‡∏î‡∏á panel ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤ ‡πÅ‡∏•‡∏∞‡∏ã‡πà‡∏≠‡∏ô placeholder
            infoPlaceholder.classList.add('d-none');
            infoArea.classList.remove('d-none');

            // 2. ‡∏™‡∏£‡πâ‡∏≤‡∏á HTML ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤
            infoArea.innerHTML = `
                <img src="${data.user.picture_url || '/static/images/No_profile.png'}" 
                    alt="Profile Picture" 
                    class="info-profile-pic">
                <form id="user-info-form">
                    <h5><i class="bi bi-person-badge"></i> User Info</h5>
                    <div class="mb-2">
                        <label for="user-nickname" class="form-label small">Nickname</label>
                        <input type="text" id="user-nickname" class="form-control form-control-sm" value="${data.user.nickname || ''}">
                    </div>
                    <div class="mb-3">
                        <label for="user-phone" class="form-label small">Phone</label>
                        <input type="text" id="user-phone" class="form-control form-control-sm" value="${data.user.phone || ''}">
                    </div>
                    <button type="submit" class="btn btn-sm btn-success w-100">Save Info</button>
                </form>

                <h5><i class="bi bi-tag"></i> Status & Tags</h5>
                <div class="btn-group btn-group-sm w-100 mb-2" role="group">
                    <button type="button" class="btn btn-outline-success status-btn" data-status="deposit">‡∏ù‡∏≤‡∏Å</button>
                    <button type="button" class="btn btn-outline-warning status-btn" data-status="withdraw">‡∏ñ‡∏≠‡∏ô</button>
                    <button type="button" class="btn btn-outline-danger status-btn" data-status="issue">‡∏ï‡∏¥‡∏î‡∏õ‡∏±‡∏ç‡∏´‡∏≤</button>
                    <button type="button" class="btn btn-outline-dark status-btn" data-status="closed">‡∏õ‡∏¥‡∏î‡πÄ‡∏Ñ‡∏™</button>
                </div>
                <div id="tag-management-area" class="mb-2">
                    <div id="user-tags-container"></div>
                    <button type="button" class="btn btn-outline-primary btn-sm" id="manage-tags-btn">
                        <i class="bi bi-tags-fill"></i> ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ Tag
                    </button>
                </div>
                <a href="/chats/download/${userId}?oa=${oaId}" target="_blank" class="btn btn-sm btn-outline-secondary w-100" title="Download Chat History">
                    <i class="bi bi-download"></i> Download History
                </a>

                <h5><i class="bi bi-pencil-square"></i> Note</h5>
                <textarea id="user-note" class="form-control" rows="5" placeholder="Add a note...">${data.user.note || ''}</textarea>
            `;

            // 3. ‡∏™‡∏£‡πâ‡∏≤‡∏á HTML ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Chat Header (‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏á‡πà‡∏≤‡∏¢‡∏Ç‡∏∂‡πâ‡∏ô)
            const chatHeader = document.getElementById('chat-header');
            chatHeader.innerHTML = `
                <a href="${data.account.manager_url || '#'}" target="_blank" rel="noopener noreferrer" class="text-muted d-block text-decoration-none" title="Open in LINE Official Account Manager">
                    <i class="bi bi-line"></i> Chatting on: <strong>@${data.account.name}</strong> <i class="bi bi-box-arrow-up-right small"></i>
                </a>
            `;

            currentUserTags = data.user.tags; // 1. ‡πÄ‡∏Å‡πá‡∏ö Tag ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡πÑ‡∏ß‡πâ‡πÉ‡∏ô‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£
            displayUserTags(data.user.tags);  // 2. ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ß‡∏≤‡∏î Tag

            messagesContainer.innerHTML = '';
            const imagePromises = [];
            data.messages.forEach(msg => { const promise = appendMessage(messagesContainer, msg); if (promise) { imagePromises.push(promise); } });
            Promise.all(imagePromises).then(() => {
                // ‡∏´‡∏ô‡πà‡∏ß‡∏á‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á scroll ‡πÑ‡∏õ‡∏ó‡πâ‡∏≤‡∏¢‡∏™‡∏∏‡∏î‡∏Ç‡∏≠‡∏á event queue
                setTimeout(() => {
                    messagesContainer.scrollTop = messagesContainer.scrollHeight;
                }, 0);
            });
            const qrResponse = await fetch(`/chats/api/quick_replies/${oaId}`);
            availableQuickReplies = await qrResponse.json();
            const newRoomName = `chat_${userId}_${oaId}`;
            if (currentRoom && currentRoom !== newRoomName) { socket.emit('leave', { room: currentRoom }); }
            socket.emit('join', { room: newRoomName });
            currentRoom = newRoomName;

            const blockedAlert = document.getElementById('blocked-user-alert');
            const replyForm = document.getElementById('reply-form'); // <--- ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏°‡∏≤‡πÉ‡∏ä‡πâ ID ‡∏Ç‡∏≠‡∏á‡∏ü‡∏≠‡∏£‡πå‡∏°‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á

            if (data.user.is_blocked) {
                // ‡∏ñ‡πâ‡∏≤‡∏ö‡∏•‡πá‡∏≠‡∏Å: ‡πÅ‡∏™‡∏î‡∏á‡πÅ‡∏ñ‡∏ö‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô ‡πÅ‡∏•‡∏∞‡∏ã‡πà‡∏≠‡∏ô‡∏ü‡∏≠‡∏£‡πå‡∏°‡∏û‡∏¥‡∏°‡∏û‡πå
                blockedAlert.classList.remove('d-none');
                replyForm.classList.add('d-none');
            } else {
                // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏ö‡∏•‡πá‡∏≠‡∏Å: ‡∏ã‡πà‡∏≠‡∏ô‡πÅ‡∏ñ‡∏ö‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô ‡πÅ‡∏•‡∏∞‡πÅ‡∏™‡∏î‡∏á‡∏ü‡∏≠‡∏£‡πå‡∏°‡∏û‡∏¥‡∏°‡∏û‡πå
                blockedAlert.classList.add('d-none');
                replyForm.classList.remove('d-none');
            }

        } catch (error) {
            console.error('Failed to load chat:', error);
            messagesContainer.innerHTML = '<p class="text-center text-danger">Failed to load conversation.</p>';
        }
    }

    function handleConversationUpdate(convData) {
        if (!convData || !convData.user_id) return;

        // --- ‡∏™‡πà‡∏ß‡∏ô‡∏ó‡∏µ‡πà 1: ‡∏™‡∏£‡πâ‡∏≤‡∏á Element ‡πÉ‡∏´‡∏°‡πà (‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏î‡∏¥‡∏°) ---
        const existingUserLink = document.querySelector(`.list-group-item-action[data-userid="${convData.user_id}"][data-oaid="${convData.line_account_id}"]`);
        if (existingUserLink) {
            existingUserLink.remove();
        }

        const newLink = document.createElement('a');
        // ... (‡πÇ‡∏Ñ‡πâ‡∏î‡∏™‡πà‡∏ß‡∏ô‡∏™‡∏£‡πâ‡∏≤‡∏á newLink ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏î‡∏¥‡∏°) ...
        newLink.href = "#";
        newLink.className = `list-group-item list-group-item-action d-flex align-items-center status-${convData.status}`;
        newLink.dataset.userid = convData.user_id;
        newLink.dataset.oaid = convData.line_account_id;
        if (convData.last_unread_timestamp) {
            newLink.dataset.unreadTimestamp = convData.last_unread_timestamp;
        } else {
            delete newLink.dataset.unreadTimestamp;
        }
        const defaultAvatar = "/static/images/No_profile.png";
        const unreadBadge = (convData.unread_count && convData.unread_count > 0) ? `<span class="badge bg-danger rounded-pill">${convData.unread_count}</span>` : '';
        const timerHTML = `<small class="text-danger me-2 unread-timer" id="timer-${convData.user_id}-${convData.line_account_id}"></small>`;
        const readByHTML = convData.read_by ? `<small class="text-muted read-by-badge">${convData.read_by}</small>` : '';
        const truncatedMessage = convData.last_message_content;
        let tagsHTML = '';
        if (convData.tags && convData.tags.length > 0) {
            tagsHTML = convData.tags.map(tag => `<span class="badge me-1" style="background-color: ${tag.color}; color: white; font-size: 0.65em;">${tag.name}</span>`).join('');
        }
        const displayTime = formatSidebarTimestamp(convData.last_message_iso_timestamp);

        newLink.innerHTML = `
        <img src="${convData.picture_url || defaultAvatar}" alt="Profile" class="rounded-circle me-3" style="width: 50px; height: 50px;">
        <div class="flex-grow-1">
            <div class="d-flex w-100 justify-content-between">
                <strong class="mb-1">${truncateDisplayName(convData.display_name)}</strong>
                <div>${timerHTML}${unreadBadge}</div>
            </div>
            <div class="d-flex justify-content-between align-items-center">
                <div>
                    <small class="text-muted me-2">@${convData.oa_name}</small>
                    ${tagsHTML}
                </div>
                <small class="text-muted">${displayTime}</small>
            </div>
            <p class="mb-0 text-muted small sidebar-last-message">
                <span class="message-preview">
                    <span>${convData.last_message_prefix}</span> ${truncatedMessage}
                </span>
                ${readByHTML}
            </p>
        </div>`;

        // --- ‚òÖ‚òÖ‚òÖ ‡∏™‡πà‡∏ß‡∏ô‡∏ó‡∏µ‡πà 2: Logic ‡πÉ‡∏´‡∏°‡πà‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏´‡∏≤‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÅ‡∏ó‡∏£‡∏Å ‚òÖ‚òÖ‚òÖ ---
        const userList = document.getElementById('user-list');

        if (convData.status === 'closed') {
            // --- ‡∏ñ‡πâ‡∏≤‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏õ‡πá‡∏ô 'closed' ---
            // ‡πÉ‡∏´‡πâ‡∏´‡∏≤‡πÅ‡∏ä‡∏ó 'closed' ‡∏≠‡∏±‡∏ô‡πÅ‡∏£‡∏Å‡∏™‡∏∏‡∏î‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà
            const firstClosed = userList.querySelector('.status-closed');
            if (firstClosed) {
                // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏à‡∏≠ ‡πÉ‡∏´‡πâ‡πÅ‡∏ó‡∏£‡∏Å "‡∏Å‡πà‡∏≠‡∏ô‡∏´‡∏ô‡πâ‡∏≤" ‡πÅ‡∏ä‡∏ó closed ‡∏≠‡∏±‡∏ô‡πÅ‡∏£‡∏Å
                userList.insertBefore(newLink, firstClosed);
            } else {
                // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÄ‡∏à‡∏≠‡πÅ‡∏ä‡∏ó closed ‡πÄ‡∏•‡∏¢ ‡πÉ‡∏´‡πâ‡πÄ‡∏≠‡∏≤‡πÑ‡∏õ‡∏ï‡πà‡∏≠‡∏ó‡πâ‡∏≤‡∏¢‡∏™‡∏∏‡∏î
                userList.appendChild(newLink);
            }
        } else {
            // --- ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏≠‡∏∑‡πà‡∏ô‡πÜ (unread, read, issue, etc.) ---
            // ‡πÉ‡∏´‡πâ‡∏ô‡∏≥‡πÑ‡∏õ‡∏ß‡∏≤‡∏á‡πÑ‡∏ß‡πâ‡∏ö‡∏ô‡∏™‡∏∏‡∏î‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏î‡∏¥‡∏°
            userList.prepend(newLink);
        }

        if (String(convData.user_id) === String(currentUserId) && String(convData.line_account_id) === String(currentOaId)) {
            newLink.classList.add('active');
        }
    }


    // 4. SOCKET.IO EVENT LISTENERS (‡∏ï‡∏±‡∏ß‡∏î‡∏±‡∏Å‡∏ü‡∏±‡∏á‡∏à‡∏≤‡∏Å Server)

    async function reloadSidebar() {
        console.log('üîÑ Received resort signal. Reloading sidebar...');
        try {
            // 1. ‡∏¢‡∏¥‡∏á request ‡πÑ‡∏õ‡∏ó‡∏µ‡πà‡∏´‡∏ô‡πâ‡∏≤‡πÅ‡∏ä‡∏ó‡∏´‡∏•‡∏±‡∏Å ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ç‡∏≠ HTML ‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
            const response = await fetch('/chats/');
            if (!response.ok) {
                throw new Error('Failed to fetch sidebar content');
            }
            const htmlText = await response.text();

            // 2. ‡πÅ‡∏õ‡∏•‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° HTML ‡πÉ‡∏´‡πâ‡∏Å‡∏•‡∏≤‡∏¢‡πÄ‡∏õ‡πá‡∏ô Document object ‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß‡πÉ‡∏ô memory
            const parser = new DOMParser();
            const doc = parser.parseFromString(htmlText, 'text/html');

            // 3. ‡∏î‡∏∂‡∏á‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡πÉ‡∏´‡∏°‡πà‡∏à‡∏≤‡∏Å Document ‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß‡∏ô‡∏±‡πâ‡∏ô
            const newUserListContent = doc.getElementById('user-list').innerHTML;
            const newPaginationContent = doc.getElementById('sidebar-pagination-container').innerHTML;

            // 4. ‡∏ô‡∏≥‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡πÉ‡∏´‡∏°‡πà‡πÑ‡∏õ "‡∏™‡∏ß‡∏°‡∏ó‡∏±‡∏ö" ‡∏Ç‡∏≠‡∏á‡πÄ‡∏Å‡πà‡∏≤‡∏ö‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏ß‡πá‡∏ö‡∏à‡∏£‡∏¥‡∏á
            document.getElementById('user-list').innerHTML = newUserListContent;
            document.getElementById('sidebar-pagination-container').innerHTML = newPaginationContent;


            console.log('‚úÖ Sidebar reloaded successfully.');
        } catch (error) {
            console.error('Failed to reload sidebar:', error);
        }
    }

    // =======================================================
    // START: SOCKET.IO EVENT LISTENERS (FINAL DEBUG VERSION)
    // =======================================================

    console.log('Attempting to connect to Socket.IO server...');

    socket.on('connect', () => {
        console.log('‚úÖ‚úÖ‚úÖ SUCCESS: Connected to WebSocket server! Session ID:', socket.id);

        // ‡∏î‡∏∂‡∏á group_ids ‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏≠‡∏¢‡∏π‡πà‡∏à‡∏≤‡∏Å SERVER_DATA ‡∏ó‡∏µ‡πà Flask ‡∏™‡πà‡∏á‡∏°‡∏≤‡πÉ‡∏´‡πâ
        const activeGroupIds = SERVER_DATA.selected_group_ids || [];
        socket.emit('update_active_groups', { group_ids: activeGroupIds });
    });

    socket.on('connect_error', (err) => {
        console.error('üî•üî•üî• FAILED: Socket.IO Connection Error! üî•üî•üî•');
        console.error('Error Type:', err.name);
        console.error('Error Message:', err.message);
        if (err.data) {
            console.error('Error Data:', err.data);
        }
    });

    socket.on('disconnect', (reason) => {
        console.warn('üîå Socket.IO Disconnected. Reason:', reason);
    });

    socket.on('render_conversation_update', (freshData) => {
        if (isSearching) {
            console.log('Search is active. Ignoring real-time sidebar update.');

            // (‡∏ó‡∏≤‡∏á‡πÄ‡∏•‡∏∑‡∏≠‡∏Å) ‡πÅ‡∏™‡∏î‡∏á‡∏õ‡πâ‡∏≤‡∏¢‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÉ‡∏´‡∏°‡πà ‡πÅ‡∏ï‡πà‡πÑ‡∏°‡πà‡πÑ‡∏õ‡∏£‡∏ö‡∏Å‡∏ß‡∏ô‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤
            const newMessageAlert = document.getElementById('new-message-alert');
            if (newMessageAlert) {
                newMessageAlert.style.display = 'block';
                newMessageAlert.textContent = 'New updates available. Clear search to see them.';
            }
            return; // ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ó‡∏±‡∏ô‡∏ó‡∏µ
        }

        if (!freshData || !freshData.user_id) return;

        const urlParams = new URLSearchParams(window.location.search);
        const currentFilter = urlParams.get('status_filter') || 'all';
        const existingElement = document.querySelector(`.list-group-item-action[data-userid="${freshData.user_id}"][data-oaid="${freshData.line_account_id}"]`);

        // --- ‚òÖ‚òÖ‚òÖ Logic ‡πÉ‡∏´‡∏°‡πà‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î ‚òÖ‚òÖ‚òÖ ---

        // 1. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÉ‡∏´‡∏°‡πà‡∏Ç‡∏≠‡∏á‡πÅ‡∏ä‡∏ó‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡∏ü‡∏¥‡∏•‡πÄ‡∏ï‡∏≠‡∏£‡πå‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà (‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏£‡∏≤‡∏≠‡∏¢‡∏π‡πà‡∏ó‡∏µ‡πà‡∏´‡∏ô‡πâ‡∏≤ '‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î')
        const shouldBeVisible = (currentFilter === 'all') || (freshData.status === currentFilter);

        if (shouldBeVisible) {
            // 2. ‡∏ñ‡πâ‡∏≤‡πÅ‡∏ä‡∏ó‡∏Ñ‡∏ß‡∏£‡∏à‡∏∞‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡πÉ‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡∏ô‡∏µ‡πâ: ‡πÉ‡∏´‡πâ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ handleConversationUpdate
            // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡∏à‡∏∞‡∏•‡∏ö‡∏Ç‡∏≠‡∏á‡πÄ‡∏Å‡πà‡∏≤ (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ) ‡πÅ‡∏•‡πâ‡∏ß‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡πÉ‡∏™‡πà‡πÄ‡∏Ç‡πâ‡∏≤‡πÑ‡∏õ ‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏õ‡πá‡∏ô‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡πÄ‡∏™‡∏°‡∏≠
            handleConversationUpdate(freshData);
        } else {
            // 3. ‡∏ñ‡πâ‡∏≤‡πÅ‡∏ä‡∏ó "‡πÑ‡∏°‡πà‡∏Ñ‡∏ß‡∏£" ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡πÉ‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡∏ô‡∏µ‡πâ‡∏≠‡∏µ‡∏Å‡∏ï‡πà‡∏≠‡πÑ‡∏õ (‡πÄ‡∏ä‡πà‡∏ô ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß)
            // ‡πÅ‡∏•‡∏∞‡∏ñ‡πâ‡∏≤‡πÅ‡∏ä‡∏ó‡∏ô‡∏±‡πâ‡∏ô‡∏°‡∏µ‡πÅ‡∏™‡∏î‡∏á‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô Sidebar ‡∏Ç‡∏≠‡∏á‡πÄ‡∏£‡∏≤
            if (existingElement) {
                // ‡πÉ‡∏´‡πâ‡∏•‡∏ö‡∏°‡∏±‡∏ô‡∏ó‡∏¥‡πâ‡∏á‡πÑ‡∏õ‡∏à‡∏≤‡∏Å‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠‡∏ó‡∏±‡∏ô‡∏ó‡∏µ
                existingElement.remove();
            }
        }
    });

    socket.on('new_message', function (msgData) {
        // --- ‡∏™‡πà‡∏ß‡∏ô‡∏ó‡∏µ‡πà 1: ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô (‡πÄ‡∏™‡∏µ‡∏¢‡∏á & Desktop) ---
        const isAdminMessage = msgData.sender_type === 'admin';
        if (msgData.message_type !== 'event' && !isAdminMessage) {
            // ‡πÄ‡∏•‡πà‡∏ô‡πÄ‡∏™‡∏µ‡∏¢‡∏á
            notificationSound.play().catch(e => console.warn("Sound notification failed.", e));

            // ‡πÅ‡∏™‡∏î‡∏á Desktop notification
            if (Notification.permission === "granted") {
                const userLink = document.querySelector(`.list-group-item-action[data-userid="${msgData.user_id}"][data-oaid="${msgData.oa_id}"]`);
                let title = "‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÉ‡∏´‡∏°‡πà";
                let iconUrl = "/static/images/default-avatar.png";
                if (userLink) {
                    title = `‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÉ‡∏´‡∏°‡πà‡∏à‡∏≤‡∏Å ${userLink.querySelector('strong').textContent}`;
                    iconUrl = userLink.querySelector('img').src;
                }
                const notification = new Notification(title, { body: msgData.content, icon: iconUrl, tag: msgData.user_id });
                notification.onclick = () => {
                    window.focus();
                    if (userLink) userLink.click();
                };
            }
        }

        // --- ‡∏™‡πà‡∏ß‡∏ô‡∏ó‡∏µ‡πà 2: ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡πà‡∏≤‡∏á‡πÅ‡∏ä‡∏ó‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡∏¥‡∏î‡∏≠‡∏¢‡∏π‡πà ---
        const isForCurrentChat = String(msgData.user_id) === String(currentUserId) &&
            String(msgData.oa_id) === String(currentOaId);

        if (isForCurrentChat) {
            appendMessage(messagesContainer, msgData);
        }
    });

    // =======================================================
    // END: SOCKET.IO EVENT LISTENERS
    // =======================================================





    // handle

    async function handleSendTextMessage(e) {
        e.preventDefault();
        const messageText = replyMessageInput.value.trim();
        if (!messageText || !currentUserId) return;

        const originalMessage = replyMessageInput.value;
        replyMessageInput.value = '';
        inlineQrResults.style.display = 'none';

        const sendButton = document.getElementById('send-btn');
        if (sendButton) sendButton.disabled = true;

        try {
            // 1. ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å API ‡πÅ‡∏•‡∏∞‡∏£‡∏≠‡∏à‡∏ô‡∏Å‡∏ß‡πà‡∏≤‡∏à‡∏∞‡πÑ‡∏î‡πâ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏Å‡∏•‡∏±‡∏ö‡∏°‡∏≤
            const result = await sendTextMessage(currentUserId, currentOaId, messageText);

            // 2. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ Server ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
            if (result && result.db_saved_successfully) {
                // 3. ‡∏ñ‡πâ‡∏≤‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à, ‡∏ô‡∏≥‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå‡∏à‡∏≤‡∏Å Server ‡∏°‡∏≤‡∏ß‡∏≤‡∏î UI
                const promise = appendMessage(messagesContainer, result);

                Promise.resolve(promise).then(() => {
                    messagesContainer.scrollTop = messagesContainer.scrollHeight;
                });

                // --- ‚òÖ‚òÖ‚òÖ 4. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÅ‡∏•‡∏∞‡πÄ‡∏£‡∏µ‡∏¢‡∏Å markMessageAsFailed ‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà ‚òÖ‚òÖ‚òÖ ---
                if (!result.line_sent_successfully) {
                    markMessageAsFailed(result.id, result.line_api_error_message || '‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÑ‡∏õ LINE ‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');
                }
            } else {
                throw new Error(result.message || 'Server did not process the message.');
            }
        } catch (error) {
            console.error("Failed to send message:", error);
            alert('‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß: ' + error.message);
            replyMessageInput.value = originalMessage;
        } finally {
            if (sendButton) sendButton.disabled = false;
        }
    }





    function handleImageSelection(event) {
        const file = event.target.files[0];
        processAndPreviewImage(file);
    }

    async function handleSendImage() {
        if (!selectedImageFile || !currentUserId) return;
        imagePreviewModal.hide(); // ‡∏õ‡∏¥‡∏î Modal ‡∏Å‡πà‡∏≠‡∏ô

        try {
            // 1. ‡∏™‡πà‡∏á‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡πÑ‡∏õ‡∏ó‡∏µ‡πà Server ‡πÅ‡∏•‡∏∞‡∏£‡∏≠‡∏à‡∏ô‡∏Å‡∏ß‡πà‡∏≤‡∏à‡∏∞‡πÑ‡∏î‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå‡∏Å‡∏•‡∏±‡∏ö‡∏°‡∏≤
            const result = await sendImageMessage(currentUserId, currentOaId, selectedImageFile);

            // 2. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ Server ‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡∏°‡∏≤‡∏ß‡πà‡∏≤‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
            if (result && result.db_saved_successfully) {
                // 3. ‡∏ñ‡πâ‡∏≤‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à, ‡∏Ñ‡πà‡∏≠‡∏¢‡∏ô‡∏≥‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å Server ‡∏°‡∏≤‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÄ‡∏î‡∏µ‡∏¢‡∏ß
                const promise = appendMessage(messagesContainer, result);
                Promise.resolve(promise).then(() => {
                    messagesContainer.scrollTop = messagesContainer.scrollHeight;
                });
            } else {
                // ‡∏ñ‡πâ‡∏≤ Server ‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡∏°‡∏≤‡∏ß‡πà‡∏≤‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
                throw new Error(result.db_error || 'Failed to process image on server');
            }
        } catch (error) {
            console.error('Send image error:', error);
            alert('Failed to send image.');
        } finally {
            // ‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå‡∏Ñ‡πà‡∏≤‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÄ‡∏™‡∏£‡πá‡∏à‡πÄ‡∏™‡∏°‡∏≠
            imageInput.value = '';
            selectedImageFile = null;
            replyMessageInput.focus();
        }
    }

    function processAndPreviewImage(file) {
        if (file && file.type.startsWith('image/')) {
            selectedImageFile = file;
            const reader = new FileReader();
            reader.onload = (e) => {
                previewImage.src = e.target.result;
                imagePreviewModal.show();
            }
            reader.readAsDataURL(file);
        }
    }

    async function handleSaveUserInfo(event) {
        event.preventDefault();

        if (!currentUserDbId) {
            console.error("Cannot save, currentUserDbId is not set.");
            return;
        }

        const nickname = document.getElementById('user-nickname').value;
        const phone = document.getElementById('user-phone').value;
        const note = document.getElementById('user-note').value;

        try {
            // ‡πÄ‡∏£‡∏≤‡∏à‡∏∞‡πÄ‡∏£‡∏µ‡∏¢‡∏Å API ‡πÉ‡∏´‡πâ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏î‡∏¥‡∏°
            await saveUserInfo(currentUserDbId, nickname, phone, note);

            const saveBtn = document.querySelector('#user-info-form button[type="submit"]');
            if (saveBtn) {
                saveBtn.textContent = 'Saved!';
                setTimeout(() => { saveBtn.textContent = 'Save Info'; }, 2000);
            }

        } catch (error) {
            console.error('Save user info error:', error);
            alert('Failed to save user info.');
        }
    }

    async function handleStickerSelection(event) {
        if (event.target && event.target.classList.contains('sticker-item')) {
            const { packageid, stickerid } = event.target.dataset;
            if (!packageid || !stickerid || !currentUserId) return;
            stickerPickerModal.hide();

            try {
                // 1. ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏ï‡∏¥‡∏Å‡πÄ‡∏Å‡∏≠‡∏£‡πå‡πÑ‡∏õ Server ‡πÅ‡∏•‡∏∞‡∏£‡∏≠‡∏Å‡∏≤‡∏£‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö
                const result = await sendStickerMessage(currentUserId, currentOaId, packageid, stickerid);

                // 2. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏à‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà Server ‡∏™‡πà‡∏á‡∏Å‡∏•‡∏±‡∏ö‡∏°‡∏≤
                if (result && result.db_saved_successfully) {
                    const promise = appendMessage(messagesContainer, result);
                    Promise.resolve(promise).then(() => {
                        messagesContainer.scrollTop = messagesContainer.scrollHeight;
                    });
                    replyMessageInput.focus();
                } else {
                    throw new Error('Failed to process sticker on server');
                }

            } catch (error) {
                console.error('Send sticker error:', error);
                alert('Failed to send sticker.');
            }
        }
    }


    async function handleScrollToLoadMore() {
        if (isLoadingMore || messagesContainer.scrollTop !== 0 || currentOffset >= totalMessages) {
            return;
        }
        isLoadingMore = true;
        const loadingIndicator = document.createElement('p');
        loadingIndicator.className = 'text-center text-muted small py-2';
        loadingIndicator.textContent = 'Loading older messages...';
        messagesContainer.prepend(loadingIndicator);

        try {
            const data = await fetchMoreMessages(currentUserId, currentOaId, currentOffset);
            const oldScrollHeight = messagesContainer.scrollHeight;
            loadingIndicator.remove();

            if (data.messages.length > 0) {
                data.messages.forEach(msg => appendMessage(messagesContainer, msg, true));
                messagesContainer.scrollTop = messagesContainer.scrollHeight - oldScrollHeight;
                currentOffset += data.messages.length;
            } else {
                const endOfHistory = document.createElement('p');
                endOfHistory.className = 'text-center text-muted small py-3';
                endOfHistory.textContent = 'End of conversation history';
                messagesContainer.prepend(endOfHistory);
                totalMessages = currentOffset;
            }
        } catch (error) {
            console.error("Load more error:", error);
            loadingIndicator.textContent = 'Failed to load messages.';
        } finally {
            isLoadingMore = false;
        }
    }

    async function loadStickers() {
        const stickerGrid = document.getElementById('sticker-grid');
        if (stickerGrid.dataset.loaded) return;
        try {
            const stickers = await fetchStickers();
            stickerGrid.innerHTML = '';
            stickers.forEach(sticker => {
                const stickerEl = document.createElement('img');
                stickerEl.src = `https://stickershop.line-scdn.net/stickershop/v1/sticker/${sticker.stickerId}/ANDROID/sticker.png`;
                stickerEl.classList.add('sticker-item');
                stickerEl.dataset.packageid = sticker.packageId;
                stickerEl.dataset.stickerid = sticker.stickerId;
                stickerGrid.appendChild(stickerEl);
            });
            stickerGrid.dataset.loaded = "true";
        } catch (error) {
            console.error('Sticker load error:', error);
            stickerGrid.innerHTML = '<p class="text-center text-danger">Failed to load stickers.</p>';
        }
    }

    function handleQuickReplySelection(e) {
        const item = e.target.closest('.quick-reply-item');
        if (item) {
            replyMessageInput.value = item.dataset.message;
            quickReplyModal.hide();
            replyMessageInput.focus();
        }
    }

    function handleQuickReplySearch() {
        const filter = quickReplySearch.value.toUpperCase();
        const filteredReplies = availableQuickReplies.filter(r =>
            r.shortcut.toUpperCase().includes(filter) || r.message.toUpperCase().includes(filter)
        );
        populateQuickReplyList(quickReplyList, filteredReplies);
    }

    function handleInlineQuickReply(e) {
        const text = e.target.value;
        if (text.length > 0) {
            const searchTerm = text.toUpperCase();
            // --- ‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏≠‡∏¢‡∏π‡πà‡∏ï‡∏£‡∏á‡∏ô‡∏µ‡πâ ---
            const filteredReplies = availableQuickReplies.filter(r =>
                r.shortcut.toUpperCase().includes(searchTerm));
            if (filteredReplies.length > 0) {
                populateInlineQuickReply(inlineQrResults, filteredReplies);
                inlineQrResults.style.display = 'block';
            } else {
                inlineQrResults.style.display = 'none';
            }
        } else {
            inlineQrResults.style.display = 'none';
        }
    }

    function handleInlineQrSelection(e) {
        e.preventDefault();
        const item = e.target.closest('.inline-qr-item');
        if (item) {
            replyMessageInput.value = item.dataset.message;
            inlineQrResults.style.display = 'none';
            replyMessageInput.focus();
        }
    }

    async function performSearch(query) {
        if (query.length < 2) { // ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏û‡∏¥‡∏°‡∏û‡πå‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 2 ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£
            // ‡∏ñ‡πâ‡∏≤‡∏Ñ‡∏≥‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏™‡∏±‡πâ‡∏ô‡πÑ‡∏õ ‡πÉ‡∏´‡πâ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÅ‡∏ä‡∏ó‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡∏Å‡∏•‡∏±‡∏ö‡∏°‡∏≤ (‡∏ñ‡πâ‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£)
            // ‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÉ‡∏´‡πâ‡∏ß‡πà‡∏≤‡∏á
            // userList.innerHTML = ''; // ‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å: ‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£
            return;
        }

        try {
            const response = await fetch(`/chats/api/search_conversations?q=${query}`);
            if (!response.ok) throw new Error('Search request failed');
            const users = await response.json();
            renderUserList(users);
        } catch (error) {
            console.error("Search error:", error);
        }
    }

    // [‡πÄ‡∏û‡∏¥‡πà‡∏°] ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÉ‡∏´‡∏°‡πà‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ß‡∏≤‡∏î‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ User ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏ä‡πâ‡∏ã‡πâ‡∏≥‡πÑ‡∏î‡πâ
    function renderUserList(users) {
        const userList = document.getElementById('user-list');
        userList.innerHTML = ''; // ‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÄ‡∏Å‡πà‡∏≤‡∏ó‡∏¥‡πâ‡∏á

        if (users.length === 0) {
            userList.innerHTML = '<li class="list-group-item">No conversations found.</li>';
            return;
        }

        users.forEach(user => {
            const userLink = document.createElement('a');
            userLink.href = "#";
            userLink.className = "list-group-item list-group-item-action d-flex align-items-center";
            userLink.dataset.userid = user.user_id;
            userLink.dataset.oaid = user.line_account_id;

            const defaultAvatar = "{{ url_for('static', filename='images/default-avatar.png') }}";
            const unreadBadge = user.is_read ? '' : '<span class="badge bg-danger rounded-pill">[U]</span>';

            userLink.innerHTML = `
            <img src="${user.picture_url || defaultAvatar}"
                 alt="Profile" class="rounded-circle me-3" style="width: 50px; height: 50px;">
            <div class="flex-grow-1">
                <div class="d-flex w-100 justify-content-between">
                    <strong class="mb-1">${truncateDisplayName(user.display_name)}</strong>
                    ${unreadBadge}
                </div>
                <small class="text-muted">@${user.oa_name}</small>
                <p class="mb-0 text-muted text-truncate small">
                    <span class="${user.is_read ? 'text-primary' : ''}">${user.last_message_prefix}</span> 
                    ${user.last_message_content}
                </p>
            </div>
        `;
            userList.appendChild(userLink);
        });
    }

    async function handleStatusButtonClick(event) {
        const statusButton = event.target.closest('.status-btn');
        if (!statusButton) return;

        const newStatus = statusButton.dataset.status;
        if (!currentUserDbId || !newStatus) return;

        try {
            const response = await fetch(`/chats/api/conversation_status/${currentUserDbId}`, {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ status: newStatus })
            });
            if (!response.ok) throw new Error('Failed to update status');

            const result = await response.json();

            const userLink = document.querySelector(`.list-group-item-action[data-userid="${currentUserId}"][data-oaid="${currentOaId}"]`);
            if (userLink) {
                userLink.className = 'list-group-item list-group-item-action d-flex align-items-center'; // Reset classes
                userLink.classList.add(`status-${result.new_status}`);
            }

        } catch (error) {
            console.error("Status update error:", error);
            alert("Failed to update status.");
        }
    }

    function checkAndHideAlert() {
        const params = new URLSearchParams(window.location.search);
        const page = parseInt(params.get('page')) || 1;
        if (page === 1 && newMessageAlert) {
            newMessageAlert.style.display = 'none';
        }
    }

    // 4. INITIALIZATION (‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô)

    //  ‡πÄ‡∏û‡∏¥‡πà‡∏° Event Listener ‡πÉ‡∏´‡πâ‡∏Å‡∏±‡∏ö‡∏õ‡πâ‡∏≤‡∏¢
    checkAndHideAlert();
    if (newMessageAlert) {
        newMessageAlert.addEventListener('click', () => {
            window.location.href = '/chats/'; // ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏Ñ‡∏•‡∏¥‡∏Å‡πÉ‡∏´‡πâ‡πÑ‡∏õ‡∏ó‡∏µ‡πà‡∏´‡∏ô‡πâ‡∏≤‡πÅ‡∏£‡∏Å
        });
    }

    //  ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏ä‡πá‡∏Ñ‡πÅ‡∏•‡∏∞‡∏ã‡πà‡∏≠‡∏ô‡∏õ‡πâ‡∏≤‡∏¢‡∏ï‡∏≠‡∏ô‡πÇ‡∏´‡∏•‡∏î‡∏´‡∏ô‡πâ‡∏≤

    userList.addEventListener('click', (e) => {
        e.preventDefault();
        const userLink = e.target.closest('a.list-group-item-action');
        if (userLink) {
            currentUserId = userLink.dataset.userid;
            currentOaId = userLink.dataset.oaid;
            if (currentUserId && currentOaId) {
                loadChatForUser(currentUserId, currentOaId);
                document.querySelectorAll('#user-list .list-group-item-action').forEach(link => {
                    link.classList.remove('active');
                });
                // 2. ‡πÄ‡∏û‡∏¥‡πà‡∏° active class ‡πÉ‡∏´‡πâ‡∏Å‡∏±‡∏ö‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡πÄ‡∏û‡∏¥‡πà‡∏á‡∏Ñ‡∏•‡∏¥‡∏Å
                userLink.classList.add('active');
            }
        }
    });

    const enableNotificationsBtn = document.getElementById('enable-notifications-btn');
    if (enableNotificationsBtn) {
        enableNotificationsBtn.addEventListener('click', (event) => {
            event.preventDefault();

            // 1. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ Browser ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö Notification API ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
            if (!("Notification" in window)) {
                alert("This browser does not support desktop notification");
            }
            // 2. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
            else if (Notification.permission === "granted") {
                alert("Desktop notifications are already enabled.");
                // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á
                new Notification("‡πÄ‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!", { body: "‡∏Ñ‡∏∏‡∏ì‡∏à‡∏∞‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÉ‡∏´‡∏°‡πà" });
            }
            else if (Notification.permission !== "denied") {
                // 3. ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏Ñ‡∏¢‡∏ñ‡∏≤‡∏° ‡∏´‡∏£‡∏∑‡∏≠‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò ‡πÉ‡∏´‡πâ‡∏Ç‡∏≠‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï
                Notification.requestPermission().then((permission) => {
                    // 4. ‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÅ‡∏•‡πâ‡∏ß
                    if (permission === "granted") {
                        alert("Desktop notifications have been enabled successfully!");
                        new Notification("‡πÄ‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!", { body: "‡∏Ñ‡∏∏‡∏ì‡∏à‡∏∞‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÉ‡∏´‡∏°‡πà" });
                    } else {
                        alert("You have denied notification permissions.");
                    }
                });
            } else {
                alert("You have previously denied notifications. Please enable them in your browser settings.");
            }
        });
    }

    // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏õ‡∏¥‡∏î Modal (‡∏ô‡∏≥ Logic ‡πÄ‡∏î‡∏¥‡∏°‡∏°‡∏≤‡πÉ‡∏™‡πà‡πÉ‡∏ô‡∏ô‡∏µ‡πâ)
    async function openTagsModal() {
        if (!currentUserDbId) return;

        try {
            // 1. ‡∏î‡∏∂‡∏á Tag ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏≤‡∏Å API
            const response = await fetch('/api/tags');
            if (!response.ok) throw new Error('Could not fetch tags');
            const allTags = await response.json();

            // 2. ‡∏™‡∏£‡πâ‡∏≤‡∏á Checkbox list
            const tagsChecklistContainer = document.getElementById('tags-checklist-container');
            tagsChecklistContainer.innerHTML = ''; // ‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå‡∏Ç‡∏≠‡∏á‡πÄ‡∏Å‡πà‡∏≤

            allTags.forEach(tag => {
                const isChecked = currentUserTags.some(userTag => userTag.id === tag.id);
                const div = document.createElement('div');
                div.classList.add('form-check');
                div.innerHTML = `
                <input class="form-check-input" type="checkbox" value="${tag.id}" id="tag-${tag.id}" ${isChecked ? 'checked' : ''}>
                <label class="form-check-label" for="tag-${tag.id}">
                    <span class="badge" style="background-color: ${tag.color}; color: #fff;">${tag.name}</span>
                </label>
            `;
                tagsChecklistContainer.appendChild(div);
            });

            // 3. ‡πÄ‡∏õ‡∏¥‡∏î Modal
            tagsModal.show();

        } catch (error) {
            console.error("Failed to open tags modal:", error);
            alert("Could not load tags.");
        }
    }


    // ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏° "Save changes" ‡πÉ‡∏ô Modal
    saveTagsBtn.addEventListener('click', async () => {
        if (!currentUserDbId) return;

        const selectedTagIds = Array.from(tagsChecklistContainer.querySelectorAll('input:checked')).map(input => parseInt(input.value));
        const originalTagIds = currentUserTags.map(tag => tag.id);

        try {
            // ‡∏´‡∏≤ Tag ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏û‡∏¥‡πà‡∏°
            const tagsToAdd = selectedTagIds.filter(id => !originalTagIds.includes(id));
            // ‡∏´‡∏≤ Tag ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏•‡∏ö
            const tagsToRemove = originalTagIds.filter(id => !selectedTagIds.includes(id));

            // ‡∏™‡πà‡∏á API request ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÅ‡∏•‡∏∞‡∏•‡∏ö
            for (const tagId of tagsToAdd) {
                await fetch(`/api/tags/${currentUserDbId}/assign`, {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ tag_id: tagId })
                });
            }
            for (const tagId of tagsToRemove) {
                await fetch(`/api/tags/${currentUserDbId}/remove/${tagId}`, {
                    method: 'DELETE'
                });
            }

            // ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• chat ‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠
            await loadChatForUser(currentUserId, currentOaId);

        } catch (error) {
            console.error("Failed to save tags:", error);
            alert("An error occurred while saving tags.");
        } finally {
            tagsModal.hide(); // ‡∏õ‡∏¥‡∏î Modal
        }
    });


    // --- [‡πÄ‡∏û‡∏¥‡πà‡∏°] Event Listener ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Keyboard Shortcut (F4) ---
    document.addEventListener('keydown', function (event) {
        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏õ‡∏∏‡πà‡∏°‡∏ó‡∏µ‡πà‡∏Å‡∏î‡∏Ñ‡∏∑‡∏≠ F4 (keyCode ‡∏Ñ‡∏∑‡∏≠ 115)
        // ‡πÅ‡∏•‡∏∞‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏¥‡∏î‡πÅ‡∏ä‡∏ó‡∏≠‡∏¢‡∏π‡πà (currentUserId ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà null)
        if (event.key === 'F4' || event.keyCode === 115) {

            // ‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏õ‡∏Å‡∏ï‡∏¥‡∏Ç‡∏≠‡∏á‡∏õ‡∏∏‡πà‡∏° F4 (‡πÄ‡∏ä‡πà‡∏ô ‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏¥‡∏î‡πÄ‡∏°‡∏ô‡∏π‡∏Ç‡∏≠‡∏á‡πÄ‡∏ö‡∏£‡∏≤‡∏ß‡πå‡πÄ‡∏ã‡∏≠‡∏£‡πå)
            event.preventDefault();

            // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡πÅ‡∏ä‡∏ó‡πÄ‡∏õ‡∏¥‡∏î‡∏≠‡∏¢‡∏π‡πà‡∏à‡∏£‡∏¥‡∏á‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
            if (!currentUserId || !currentUserDbId) {
                console.log("No active chat to close.");
                return; // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÅ‡∏ä‡∏ó‡πÄ‡∏õ‡∏¥‡∏î‡∏≠‡∏¢‡∏π‡πà ‡∏Å‡πá‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏ó‡∏≥‡∏≠‡∏∞‡πÑ‡∏£
            }

            // ‡∏´‡∏≤‡∏õ‡∏∏‡πà‡∏° "‡∏õ‡∏¥‡∏î‡πÄ‡∏Ñ‡∏™" ‡πÉ‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏ß‡πá‡∏ö
            const closeCaseButton = document.querySelector('.status-btn[data-status="closed"]');

            if (closeCaseButton) {
                console.log("F4 pressed, clicking 'Close Case' button...");
                // ‡∏™‡∏±‡πà‡∏á‡πÉ‡∏´‡πâ JavaScript ‡∏Ñ‡∏•‡∏¥‡∏Å‡∏õ‡∏∏‡πà‡∏°‡∏ô‡∏±‡πâ‡∏ô‡πÅ‡∏ó‡∏ô‡πÄ‡∏£‡∏≤
                closeCaseButton.click();
            } else {
                console.log("Could not find the 'Close Case' button.");
            }
        }
    });

    replyForm.addEventListener('submit', handleSendTextMessage);
    confirmSendImageBtn.addEventListener('click', handleSendImage);
    attachImageBtn.addEventListener('click', () => imageInput.click());
    imageInput.addEventListener('change', handleImageSelection);
    messagesContainer.addEventListener('scroll', handleScrollToLoadMore);
    messagesContainer.addEventListener('click', (event) => {
        if (event.target.classList.contains('chat-image')) {
            fullImageView.src = event.target.dataset.src;
            imageViewModal.show();
        }
    });





    messagesContainer.addEventListener('scroll', handleScrollToLoadMore);

    // --- ‡∏™‡∏ï‡∏¥‡πä‡∏Å‡πÄ‡∏Å‡∏≠‡∏£‡πå ---
    stickerPickerModalEl.addEventListener('show.bs.modal', loadStickers);
    stickerPickerModalEl.addEventListener('click', handleStickerSelection);

    // --- Quick Reply ---
    quickReplyBtn.addEventListener('click', () => {
        populateQuickReplyList(quickReplyList, availableQuickReplies);
        quickReplyModal.show();
    });

    quickReplyList.addEventListener('click', handleQuickReplySelection);
    quickReplySearch.addEventListener('keyup', handleQuickReplySearch);
    replyMessageInput.addEventListener('keyup', handleInlineQuickReply);
    inlineQrResults.addEventListener('click', handleInlineQrSelection);
    messagesContainer.addEventListener('click', (event) => {
        if (event.target.classList.contains('chat-image')) {
            fullImageView.src = event.target.dataset.src;
            imageViewModal.show();
        }
    });

    const searchInput = document.getElementById('user-search-input');
    const searchBtn = document.getElementById('user-search-btn');

    // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤
    function triggerSearch() {
        const query = searchInput.value.trim();
        if (query) {
            isSearching = true; // ‚òÖ‚òÖ‚òÖ ‡∏ï‡∏±‡πâ‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏ß‡πà‡∏≤‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ ‚òÖ‚òÖ‚òÖ
            console.log(`Starting search for: "${query}"`);
            performSearch(query); // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô performSearch ‡πÄ‡∏î‡∏¥‡∏°‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì
        }
    }

    // Event Listener ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ä‡πà‡∏≠‡∏á‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤
    if (searchInput) {
        // ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏° Search
        searchBtn.addEventListener('click', triggerSearch);

        // ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏Å‡∏î Enter
        searchInput.addEventListener('keydown', function (event) {
            if (event.key === 'Enter') {
                event.preventDefault();
                triggerSearch();
            }
        });

        // ‚òÖ‚òÖ‚òÖ ‡∏™‡πà‡∏ß‡∏ô‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç: ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏à‡∏ô‡∏´‡∏°‡∏î ‚òÖ‚òÖ‚òÖ
        searchInput.addEventListener('input', function () {
            if (searchInput.value.trim() === '') {
                isSearching = false; // ‚òÖ‚òÖ‚òÖ ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ ‚òÖ‚òÖ‚òÖ
                console.log('Search cleared. Reloading default chat list.');
                // ‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏ó‡∏µ‡πà‡∏´‡∏ô‡πâ‡∏≤‡πÅ‡∏£‡∏Å‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÅ‡∏ä‡∏ó‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
                window.location.href = '/chats/';
            }
        });
    }

    replyMessageInput.addEventListener('paste', function (event) {
        const items = (event.clipboardData || event.originalEvent.clipboardData).items;
        for (let index in items) {
            const item = items[index];
            if (item.kind === 'file' && item.type.includes('image')) {
                event.preventDefault();
                const file = item.getAsFile();
                processAndPreviewImage(file);
                break; // ‡πÄ‡∏à‡∏≠‡∏£‡∏π‡∏õ‡πÅ‡∏•‡πâ‡∏ß ‡∏´‡∏¢‡∏∏‡∏î‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢
            }
        }
    });

    replyMessageInput.addEventListener('keydown', function (event) {
        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏õ‡∏∏‡πà‡∏°‡∏ó‡∏µ‡πà‡∏Å‡∏î‡∏Ñ‡∏∑‡∏≠ 'Enter' ‡πÅ‡∏•‡∏∞‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏Å‡∏î 'Shift' ‡∏Ñ‡πâ‡∏≤‡∏á‡πÑ‡∏ß‡πâ
        if (event.key === 'Enter' && !event.shiftKey) {
            // 1. ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏Ç‡∏∂‡πâ‡∏ô‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡πÉ‡∏´‡∏°‡πà‡πÇ‡∏î‡∏¢‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥
            event.preventDefault();

            // 2. ‡∏´‡∏≤‡∏õ‡∏∏‡πà‡∏° Send ‡πÅ‡∏•‡πâ‡∏ß‡∏™‡∏±‡πà‡∏á‡πÉ‡∏´‡πâ‡∏Ñ‡∏•‡∏¥‡∏Å‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
            const sendButton = document.getElementById('send-btn');
            if (sendButton) {
                sendButton.click();
            }
        }
        // ‡∏ñ‡πâ‡∏≤‡∏Å‡∏î Shift + Enter, ‡πÄ‡∏£‡∏≤‡∏à‡∏∞‡πÑ‡∏°‡πà‡∏ó‡∏≥‡∏≠‡∏∞‡πÑ‡∏£‡πÄ‡∏•‡∏¢ ‡∏õ‡∏•‡πà‡∏≠‡∏¢‡πÉ‡∏´‡πâ‡πÄ‡∏ö‡∏£‡∏≤‡∏ß‡πå‡πÄ‡∏ã‡∏≠‡∏£‡πå‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏ï‡∏≤‡∏°‡∏õ‡∏Å‡∏ï‡∏¥ (‡∏Ñ‡∏∑‡∏≠‡∏Ç‡∏∂‡πâ‡∏ô‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡πÉ‡∏´‡∏°‡πà)
    });

    replyMessageInput.addEventListener('input', function () {
        this.style.height = 'auto';
        this.style.height = (this.scrollHeight) + 'px';
    });

    updateUnreadTimers();
    // ‡∏ï‡∏±‡πâ‡∏á‡πÉ‡∏´‡πâ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏ó‡∏∏‡∏Å‡πÜ 1 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
    setInterval(updateUnreadTimers, 1000);

    // ‚òÖ‚òÖ‚òÖ 4. ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÇ‡∏Ñ‡πâ‡∏î Drag and Drop ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏ô‡∏µ‡πâ‡πÄ‡∏Ç‡πâ‡∏≤‡πÑ‡∏õ ‚òÖ‚òÖ‚òÖ

    const chatInputArea = document.querySelector('.chat-input');

    // Event 1: ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏•‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏Ç‡πâ‡∏≤‡∏°‡∏≤‡πÉ‡∏ô‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢
    chatInputArea.addEventListener('dragenter', (event) => {
        event.preventDefault();
        chatInputArea.classList.add('drag-over');
    });

    // Event 2: ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏•‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå‡∏Ñ‡πâ‡∏≤‡∏á‡πÑ‡∏ß‡πâ‡πÄ‡∏´‡∏ô‡∏∑‡∏≠‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢ (‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏°‡∏≤‡∏Å)
    chatInputArea.addEventListener('dragover', (event) => {
        event.preventDefault(); // ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ‡πÄ‡∏ö‡∏£‡∏≤‡∏ß‡πå‡πÄ‡∏ã‡∏≠‡∏£‡πå‡πÄ‡∏õ‡∏¥‡∏î‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏≠‡∏á
        chatInputArea.classList.add('drag-over');
    });

    // Event 3: ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏•‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢
    chatInputArea.addEventListener('dragleave', (event) => {
        chatInputArea.classList.remove('drag-over');
    });

    // Event 4: ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏õ‡∏•‡πà‡∏≠‡∏¢‡πÑ‡∏ü‡∏•‡πå‡∏•‡∏á‡πÉ‡∏ô‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢ (‡∏´‡∏±‡∏ß‡πÉ‡∏à‡∏´‡∏•‡∏±‡∏Å)
    chatInputArea.addEventListener('drop', (event) => {
        event.preventDefault(); // ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ‡πÄ‡∏ö‡∏£‡∏≤‡∏ß‡πå‡πÄ‡∏ã‡∏≠‡∏£‡πå‡πÄ‡∏õ‡∏¥‡∏î‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏≠‡∏á
        chatInputArea.classList.remove('drag-over');

        const files = event.dataTransfer.files;
        if (files.length > 0) {
            // ‡∏î‡∏∂‡∏á‡πÑ‡∏ü‡∏•‡πå‡πÅ‡∏£‡∏Å‡∏ó‡∏µ‡πà‡∏•‡∏≤‡∏Å‡∏°‡∏≤
            const file = files[0];
            // ‡∏™‡πà‡∏á‡πÑ‡∏õ‡πÉ‡∏´‡πâ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏Å‡∏•‡∏≤‡∏á‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏≤‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ß‡πâ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏ï‡πà‡∏≠
            processAndPreviewImage(file);
        }
    });

    const applyFilterBtn = document.getElementById('apply-group-filter-btn'); // **‡∏Ñ‡∏∏‡∏ì‡∏≠‡∏≤‡∏à‡∏à‡∏∞‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô id ‡∏ô‡∏µ‡πâ‡πÉ‡∏´‡πâ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡∏õ‡∏∏‡πà‡∏°‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì**
    if (applyFilterBtn) {
        applyFilterBtn.addEventListener('click', function () {
            // ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏Å‡∏î Apply Filter ‡πÉ‡∏´‡πâ‡∏≠‡πà‡∏≤‡∏ô‡∏Ñ‡πà‡∏≤ checkbox ‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÉ‡∏´‡∏°‡πà
            const selectedIds = Array.from(document.querySelectorAll('.group-checkbox:checked')).map(cb => parseInt(cb.value));
            // ‡πÅ‡∏•‡πâ‡∏ß‡∏™‡πà‡∏á‡πÑ‡∏õ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ó‡∏µ‡πà server ‡∏ó‡∏±‡∏ô‡∏ó‡∏µ
            socket.emit('update_active_groups', { group_ids: selectedIds });

            // ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏: ‡∏™‡πà‡∏ß‡∏ô‡∏ô‡∏µ‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏Å‡∏≤‡∏£‡∏¢‡∏¥‡∏á socket event ‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏π‡πà‡πÑ‡∏õ‡∏Å‡∏±‡∏ö‡∏Å‡∏≤‡∏£ submit form ‡πÄ‡∏î‡∏¥‡∏°‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì
            // ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏•‡∏ö‡πÇ‡∏Ñ‡πâ‡∏î submit form ‡πÄ‡∏î‡∏¥‡∏°‡∏≠‡∏≠‡∏Å
        });
    }
});
